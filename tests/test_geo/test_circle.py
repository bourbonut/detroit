import detroit as d3

def in_delta(actual, expected, delta=1e-6):
    if isinstance(expected, list):
        n = len(expected)
        if len(actual) != n:
            return False
        for i in range(n):
            if not in_delta(actual[i], expected[i], delta):
                return False
        return True
    else:
        return actual >= expected - delta and actual <= expected + delta

def test_circle_1():
    o = d3.geo_circle()()
    assert o["type"] == "Polygon"
    assert in_delta(o["coordinates"], [[[-78.69007,-90],[-90,-88],[-90,-86],[-90,-84],[-90,-82],[-90,-80],[-90,-78],[-90,-76],[-90,-74],[-90,-72],[-90,-70],[-90,-68],[-90,-66],[-90,-64],[-90,-62],[-90,-60],[-90,-58],[-90,-56],[-90,-54],[-90,-52],[-90,-50],[-90,-48],[-90,-46],[-90,-44],[-90,-42],[-90,-40],[-90,-38],[-90,-36],[-90,-34],[-90,-32],[-90,-30],[-90,-28],[-90,-26],[-90,-24],[-90,-22],[-90,-20],[-90,-18],[-90,-16],[-90,-14],[-90,-12],[-90,-10],[-90,-8],[-90,-6],[-90,-4],[-90,-2],[-90,0],[-90,2],[-90,4],[-90,6],[-90,8],[-90,10],[-90,12],[-90,14],[-90,16],[-90,18],[-90,20],[-90,22],[-90,24],[-90,26],[-90,28],[-90,30],[-90,32],[-90,34],[-90,36],[-90,38],[-90,40],[-90,42],[-90,44],[-90,46],[-90,48],[-90,50],[-90,52],[-90,54],[-90,56],[-90,58],[-90,60],[-90,62],[-90,64],[-90,66],[-90,68],[-90,70],[-90,72],[-90,74],[-90,76],[-90,78],[-90,80],[-90,82],[-90,84],[-90,86],[-90,88],[-89.900735,90],[90,88],[90,86],[90,84],[90,82],[90,80],[90,78],[90,76],[90,74],[90,72],[90,70],[90,68],[90,66],[90,64],[90,62],[90,60],[90,58],[90,56],[90,54],[90,52],[90,50],[90,48],[90,46],[90,44],[90,42],[90,40],[90,38],[90,36],[90,34],[90,32],[90,30],[90,28],[90,26],[90,24],[90,22],[90,20],[90,18],[90,16],[90,14],[90,12],[90,10],[90,8],[90,6],[90,4],[90,2],[90,0],[90,-2],[90,-4],[90,-6],[90,-8],[90,-10],[90,-12],[90,-14],[90,-16],[90,-18],[90,-20],[90,-22],[90,-24],[90,-26],[90,-28],[90,-30],[90,-32],[90,-34],[90,-36],[90,-38],[90,-40],[90,-42],[90,-44],[90,-46],[90,-48],[90,-50],[90,-52],[90,-54],[90,-56],[90,-58],[90,-60],[90,-62],[90,-64],[90,-66],[90,-68],[90,-70],[90,-72],[90,-74],[90,-76],[90,-78],[90,-80],[90,-82],[90,-84],[90,-86],[90,-88],[89.91209,-90]]], 1e-5)

def test_circle_2():
    o = d3.geo_circle().set_center([0, 90])()
    assert o["type"] == "Polygon"
    assert in_delta(o["coordinates"], [[[x - 360 if x >= 180 else x, 0] for x in range(360, -1, -2)]], 1e-6)

def test_circle_3():
    o = d3.geo_circle().set_center([45, 45]).set_radius(0)()
    assert o["type"] == "Polygon"
    assert in_delta(o["coordinates"][0][0], [45, 45], 1e-6)

def test_circle_4():
    o = d3.geo_circle().set_center([0, 0]).set_radius(0.02).set_precision(45)()
    assert in_delta(o["coordinates"][0][0], o["coordinates"][0].pop(), 1e-6)
