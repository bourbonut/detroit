D3 Guide
========

`d3js <https://d3js.org/>`_ offers almost all possibilities to visualize data. You can create all elements you desired to build your own visualization as you want. Also it is possible to interact and animate your visualization. The only limitation you could face is 3D plots. However, you can replace the third axis by a color scheme.

Syntax
------

Since `d3js <https://d3js.org/>`_ is a Javascript library, the idea of :code:`detroit` is to offer a syntax as close as possible of the Javascript one.

There are three main components to know :

* :code:`detroit.Script` helps you to encapsulate all pieces of code in order to render them at the end.
* :code:`detroit.d3` is the main class to use for all :code:`d3` functions and constants.
* :code:`detroit.svg` is a helpful class to use when you need to modify your svg object.

Javascript code
***************

For instance, the `following example <https://observablehq.com/@d3/volcano-contours/2>`_ has Javascript code that you will be able easily to write with Python:

.. code:: javascript

  // Javascript
  // Load data
  data = FileAttachment("volcano.json").json();

  // d3 code
  const n = data.width;
  const m = data.height;
  const width = 928;
  const height = Math.round(m / n * width);
  const path = d3.geoPath().projection(d3.geoIdentity().scale(width / n));
  const contours = d3.contours().size([n, m]);
  const color = d3.scaleSequential(d3.interpolateTurbo)
    .domain(d3.extent(data.values)).nice();

  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "max-width: 100%; height: auto;");

  svg.append("g")
      .attr("stroke", "black")
    .selectAll()
    .data(color.ticks(20))
    .join("path")
      .attr("d", d => path(contours.contour(data.values, d)))
      .attr("fill", color);

.. note::

  The **javascript** version needs also to setup `a HTML file where d3 is imported <https://d3js.org/getting-started#d3-in-vanilla-html>`_. Also, in order to load a json file in your browser, for security reasons, you have two options: write your code on a platform such as `Observable Plot <https://observablehq.com/plot/>`_ or use a javascript library such as `live-server <https://www.npmjs.com/package/live-server>`_ and the function :code:`d3.json` for example.

Python code
***********

Now here is the version with :code:`detroit`:

.. code:: python

   # Python
   from detroit import Script, d3, svg
   from detroit import Data, js # useful classes to simplify js syntax
   from detroit import render   # render the script in your browser
   import json

   values = json.load(open("volcano.json", "r"))
   data = Data(values)

   script = Script() # All `script(...)` will be stored in this class

   n = values["width"] # or data.width.data
   m = values["height"]
   width = 928
   height = round(m / n * width)

   path = script("path", d3.geoPath().projection(d3.geoIdentity().scale(width / n)))
   contours = script("contours", d3.contours().size([n, m]))

   color = script(
       "color",
       d3.scaleSequential(d3.interpolateTurbo).domain(d3.extent(data.values)).nice()
   )

   script(
       "svg",
       d3.select(script.plot_id)
         .append("svg")
         .attr("width", width)
         .attr("height", height)
         .attr("viewBox", [0, 0, width, height])
         .attr("style", "max-width: 100%; height: auto;"),
   )

   script(
       svg.append("g")
         .attr("stroke", "black")
       .selectAll()
       .data(js("color.ticks(20)"))
       .join("path")
         .attr("d", js("d => path(contours.contour(data.values, d))"))
         .attr("fill", color)
   )

   render(values, script) # then open `localhost:5000` in your browser

.. image:: figures/volcano.svg
   :align: center

Major modifications
*******************

* :code:`script` stores variables if a name is indicated at the first argument else it considers the argument as a line. It returns this variable that can be used directly in other lines of code.

* In Javascript version, to create a `svg`, the code was: 

.. code:: javascript

  d3.create("svg")

In Python version, the code is 

.. code:: python
  
  d3.select(script.plot_id).append("svg")

The reason for this, is because the Javascript code is running into a **Observable** environment. However, with :code:`detroit`, it is in your browser or in a Jupyter notebook. :code:`select` selects prebuild HTML :code:`div` tag with the ID :code:`script.plot_id`.

* :code:`detroit` cannot offer all **javascript** syntax possibilities like javascript lambda functions :

.. code:: javascript

  d => path(contours.contour(data.values, d))

Thus, in order to write them, you must use :code:`js` 

.. code:: python

  js("d => path(contours.contour(data.values, d))")

Multiple plots
--------------

In order to get multiple visualizations, you must generate multiple :code:`Script` through its method :code:`Script.multiple` :

.. code:: python

   # Python
   from detroit import Script, d3, svg, Data, js, render
   import json

   values = json.load(open("volcano.json", "r"))
   data = Data(values)

   n = values["width"]
   m = values["height"]
   width = 928
   height = round(m / n * width)

   def make_contours(script, interpolation):
       path = script(
           "path", d3.geoPath().projection(d3.geoIdentity().scale(width / n))
       )
       contours = script("contours", d3.contours().size([n, m]))
       
       color = script(
           "color",
           d3.scaleSequential(
               interpolation
           ).domain(d3.extent(data.values)).nice()
       )
       
       script(
           "svg",
           d3.select(script.plot_id)
             .append("svg")
             .attr("width", width)
             .attr("height", height)
             .attr("viewBox", [0, 0, width, height])
             .attr("style", "max-width: 100%; height: auto;"),
       )
       
       script(
           svg.append("g")
             .attr("stroke", "black")
           .selectAll()
           .data(js("color.ticks(20)"))
           .join("path")
             .attr("d", js("d => path(contours.contour(data.values, d))"))
             .attr("fill", color)
       )
       return script

   interpolations = {
       "Turbo color scheme": d3.interpolateTurbo,
       "Warm color scheme": d3.interpolateWarm,
       "Plasma color scheme": d3.interpolatePlasma,
       "Inferno color scheme": d3.interpolateInferno,
   }

   length = len(interpolations)
   iterator = zip(interpolations.items(), Script.multiple(length))
   scripts = {
       title: make_contours(script, interpolation)
       for (title, interpolation), script in iterator
   }
   # or without title
   # scripts = [
   #    make_contours(script, interpolation)
   #    for script, interpolation in zip(interpolation.values(), Script.multiple(n))
   # ]
   render(values, scripts, grid=2) # grid = number of columns

.. image:: figures/light-multiple-volcano.svg
   :align: center
   :class: only-light

.. image:: figures/dark-multiple-volcano.svg
   :align: center
   :class: only-dark

.. note::

  The variable :code:`values` shares all data for all seperated plots.

.. note::

   The font size of titles is small because :code:`.svg` files with :code:`detroit` are designed to be used with LaTeX.
