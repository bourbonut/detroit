# Generated by detroit
# See https://github.com/bourbonut/detroit/tree/main/api_maker

from functools import partial
from operator import is_not

class linkRadial:
    def __init__(self, content="linkRadial"):
        self.content = content

    def __repr__(self):
        return self.content

    def __str__(self):
        return self.content

    def __call__(self, *args):
        arguments = ", ".join(map(repr, args))
        return f"{self}({arguments})"

    def angle(self, angle=None):
        """
        Source · Equivalent to link.x, except the accessor returns the angle in radians, with 0
        at -y (12 o’clock).

        See more informations `here <https://d3js.org/d3-shape/radial-link#linkRadial_angle>`_.
        """
        arguments = ", ".join(map(repr, filter(partial(is_not, None), (angle,))))
        return linkRadial(content=f"{self.content}.angle({arguments})")


    def radius(self, radius=None):
        """
        Source · Equivalent to link.y, except the accessor returns the radius: the distance
        from the origin.

        See more informations `here <https://d3js.org/d3-shape/radial-link#linkRadial_radius>`_.
        """
        arguments = ", ".join(map(repr, filter(partial(is_not, None), (radius,))))
        return linkRadial(content=f"{self.content}.radius({arguments})")

