# Generated by detroit
# See https://github.com/bourbonut/detroit/tree/main/api_maker

from functools import partial
from operator import is_not

class scaleSymlog:
    def __init__(self, content="scaleSymlog"):
        self.content = content

    def __repr__(self):
        return self.content

    def __str__(self):
        return self.content

    def __call__(self, *args):
        arguments = ", ".join(map(repr, args))
        return f"{self}({arguments})"

    def constant(self, constant=None):
        """
        Examples · Source · If constant is specified, sets the symlog constant to the specified
        number and returns this scale. The constant defaults to 1.
        .. code:: javascript

            const x = d3.scaleSymlog([0, 100], [0, 960]).constant(2);

        If constant is not specified, returns the current value of the symlog constant.
        .. code:: javascript

            x.constant() // 2


        See more informations `here <https://d3js.org/d3-scale/symlog#symlog_constant>`_.
        """
        arguments = ", ".join(map(repr, filter(partial(is_not, None), (constant,))))
        return scaleSymlog(content=f"{self.content}.constant({arguments})")


    def domain(self, domain=None):
        """
        Auto generated method
        """
        arguments = ", ".join(map(repr, filter(partial(is_not, None), (domain,))))
        return scaleSymlog(content=f"{self.content}.domain({arguments})")


    def nice(self):
        """
        Auto generated method
        """
        return scaleSymlog(content=f"{self.content}.nice()")

