# Generated by detroit
# See https://github.com/bourbonut/detroit/tree/main/api_maker

from functools import partial
from operator import is_not

class scaleDiverging:
    def __init__(self, content="scaleDiverging"):
        self.content = content

    def __repr__(self):
        return self.content

    def __str__(self):
        return self.content

    def __call__(self, *args):
        arguments = ", ".join(map(repr, args))
        return f"{self}({arguments})"

    def interpolator(self, interpolator=None):
        """
        If interpolator is specified, sets the scale’s interpolator to the specified function.
        .. code:: javascript

            const color = d3.scaleDiverging().interpolator(d3.interpolateRdBu);

        If interpolator is not specified, returns the scale’s current interpolator.
        .. code:: javascript

            color.interpolator() // d3.interpolateRdBu


        See more informations `here <https://d3js.org/d3-scale/diverging#diverging_interpolator>`_.
        """
        arguments = ", ".join(map(repr, filter(partial(is_not, None), (interpolator,))))
        return scaleDiverging(content=f"{self.content}.interpolator({arguments})")


    def range(self, range=None):
        """
        See linear.range. If range is specified, the given three-element array is converted to
        an interpolator function using piecewise.
        .. code:: javascript

            const color = d3.scaleDiverging().range(["blue", "white", "red"]);

        The above is equivalent to:
        .. code:: javascript

            const color = d3.scaleDiverging(d3.piecewise(["blue", "white", "red"]));


        See more informations `here <https://d3js.org/d3-scale/diverging#diverging_range>`_.
        """
        arguments = ", ".join(map(repr, filter(partial(is_not, None), (range,))))
        return scaleDiverging(content=f"{self.content}.range({arguments})")


    def rangeRound(self, range=None):
        """
        See linear.range. If range is specified, implicitly uses interpolateRound as the
        interpolator.

        See more informations `here <https://d3js.org/d3-scale/diverging#diverging_rangeRound>`_.
        """
        arguments = ", ".join(map(repr, filter(partial(is_not, None), (range,))))
        return scaleDiverging(content=f"{self.content}.rangeRound({arguments})")


    def domain(self, domain=None):
        """
        Auto generated method
        """
        arguments = ", ".join(map(repr, filter(partial(is_not, None), (domain,))))
        return scaleDiverging(content=f"{self.content}.domain({arguments})")


    def nice(self):
        """
        Auto generated method
        """
        return scaleDiverging(content=f"{self.content}.nice()")

